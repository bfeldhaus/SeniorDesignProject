using System;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Security.Cryptography;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using System.Collections.Generic;

class DuoAuth
{
    private readonly string ikey;
    private readonly string skey;
    private readonly string host;

    public DuoAuth(string integrationKey, string secretKey, string apiHost)
    {
        ikey = integrationKey;
        skey = secretKey;
        host = apiHost;
    }

    public async Task<bool> SendPushAsync(string username)
    {
        string method = "POST";
        string path = "/auth/v2/auth";

        // Params for Duo push
        var parameters = new Dictionary<string, string>
        {
            { "username", username },
            { "factor", "push" },
            { "device", "auto" }
        };

        var content = new FormUrlEncodedContent(parameters);

        // RFC 2822 date
        string date = DateTime.UtcNow.ToString("ddd, dd MMM yyyy HH:mm:ss -0000");

        // Canonical string (used to sign the request)
        string canon = $"{date}\n{method}\n{host}\n{path}\nusername={username}&factor=push&device=auto";

        // HMAC-SHA1 signature
        string sig;
        using (var hmac = new HMACSHA1(Encoding.UTF8.GetBytes(skey)))
        {
            sig = Convert.ToBase64String(hmac.ComputeHash(Encoding.UTF8.GetBytes(canon)));
        }

        string authHeader = $"{ikey}:{sig}";
        string authHeaderValue = Convert.ToBase64String(Encoding.UTF8.GetBytes(authHeader));

        using (var client = new HttpClient { BaseAddress = new Uri("https://" + host) })
        {
            client.DefaultRequestHeaders.Date = DateTimeOffset.UtcNow;
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Basic", authHeaderValue);

            HttpResponseMessage response = await client.PostAsync(path, content);
            string json = await response.Content.ReadAsStringAsync();

            Console.WriteLine("Raw Duo response: " + json);

            try
            {
                using (JsonDocument doc = JsonDocument.Parse(json))
                {
                    string result = doc.RootElement
                        .GetProperty("response")
                        .GetProperty("result")
                        .GetString();

                    return result == "allow";
                }
            }
            catch
            {
                return false;
            }
        }
    }
}

class Program
{
    static async Task Main()
    {
        var duo = new DuoAuth(
            "YOUR_INTEGRATION_KEY",
            "YOUR_SECRET_KEY",
            "api-xxxxxxxx.duosecurity.com"
        );

        bool approved = await duo.SendPushAsync("user@example.com");

        if (approved)
            Console.WriteLine("User approved login");
        else
            Console.WriteLine("User denied login");
    }
}
